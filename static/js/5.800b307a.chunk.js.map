{"version":3,"sources":["js/components/common/TextInput.js","js/redux/actions/AppActions.js","js/components/common/EditableCell.js","js/components/Todo.js","js/components/common/THeadCellWithSoring.js","js/hoc/renderChildrenWithProps.js","js/helpers/sorting.js","js/helpers/common.js","js/pages/Todos.js","js/hooks/useSorting.js"],"names":["TextInput","value","onBlur","onChange","autoFocus","placeholder","type","className","e","target","GETTODOS","constants","PENDING","CHANGETODOTITLE","TOGGLETODOCOMPLETED","GETTODOSERROR","EditableCell","setEditingId","isEditing","ID","onToggleInputFocus","cn","onClick","onFocus","Todo","item","Title","DueDate","Completed","onSelect","checked","handleChange","toggleCompleted","momentDate","moment","date","format","time","toString","THeadCellWithSoring","label","sortBy","sortOrder","sortName","handleSort","defaultSortOrder","children","rest","isSorting","classes","iconClasses","sortByCurrent","asc","desc","renderChildrenWithProps","components","props","map","component","key","cloneElement","sortShouldReturn","order","sortIds","ids","objectWithItems","sortingRules","sorted","sort","aKey","bKey","valueFormatter","aItem","bItem","a","b","convertArrayToString","arr","val","Number","Array","from","replace","each","charCodeAt","join","valueOf","JSON","parse","connect","app","todos","loading","dispatch","getTodos","Api","then","data","payload","err","console","error","changeTodoTitle","params","toggleTodoCompleted","useState","selectedItems","setSelectedItems","selectedAll","setSelectedAll","defaultSortBy","setSortBy","setSortOrder","by","useSorting","editingId","todosIds","Object","keys","todosLength","length","sortingProps","isSelected","id","includes","handleSelectItem","filter","newSelectedItems","handleSetEditing","handleToggleTodoCompleted","sortedTodos","useEffect","stopPropagation","disabled"],"mappings":"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","file":"static/js/5.800b307a.chunk.js","sourcesContent":["import React from 'react';\n\nconst TextInput = ({ value, onBlur = () => false, onChange, autoFocus = false, placeholder = '', type = 'text' }) => {\n  const handleChange = e => onChange(e.target.value);\n  return (\n    <input\n      type={type}\n      className=\"text_input\"\n      value={value}\n      onChange={handleChange}\n      onBlur={onBlur}\n      autoFocus={autoFocus}\n      placeholder={placeholder}\n    />\n  );\n};\n\nexport default TextInput;\n","import Api from '../../api';\nimport constants from '../constants/App';\n\nconst { GETTODOS, PENDING, CHANGETODOTITLE, TOGGLETODOCOMPLETED, GETTODOSERROR } = constants;\n\nexport function getTodos() {\n  return dispatch => {\n    dispatch({ type: PENDING });\n    return Api.todos\n      .getTodos()\n      .then(data => {\n        dispatch({\n          type: GETTODOS,\n          payload: data,\n        });\n      })\n      .catch(err => {\n        console.error({ err });\n        return dispatch({ type: GETTODOSERROR });\n      });\n  };\n}\n\nexport function changeTodoTitle(payload) {\n  return {\n    type: CHANGETODOTITLE,\n    payload,\n  };\n}\n\nexport function toggleTodoCompleted(payload) {\n  return {\n    type: TOGGLETODOCOMPLETED,\n    payload,\n  };\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport TextInput from './TextInput';\n\nconst EditableCell = ({ onChange, value, setEditingId, isEditing, className, ID }) => {\n  const onToggleInputFocus = () => {\n    setEditingId(null);\n    setEditingId(ID);\n  };\n  return (\n    <>\n      {!isEditing ? (\n        <td onClick={onToggleInputFocus} onFocus={onToggleInputFocus} className={className}>\n          {value}\n        </td>\n      ) : (\n        <td className={cn(className, { isEditing })}>\n          <TextInput value={value} onBlur={() => setEditingId(null)} onChange={onChange} />\n        </td>\n      )}\n    </>\n  );\n};\n\nexport default EditableCell;\n","import React from 'react';\nimport cn from 'classnames';\nimport moment from 'moment';\nimport EditableCell from './common/EditableCell';\n\nconst Todo = ({\n  item: { Title, ID, DueDate, Completed },\n  onSelect,\n  checked,\n  handleChange,\n  setEditingId,\n  isEditing,\n  toggleCompleted,\n}) => {\n  const momentDate = moment(DueDate);\n  const date = momentDate.format('YYYY.MM.DD');\n  const time = momentDate.format('HH:mm');\n  const onChange = value => handleChange({ ID, value });\n  return (\n    <tr className={cn('todo', { checked })}>\n      <td className=\"todo_action\">\n        <input type=\"checkbox\" onChange={() => onSelect(ID)} checked={checked} />\n      </td>\n      <td className=\"todo_id\">{ID}</td>\n      <EditableCell\n        onChange={onChange}\n        value={Title}\n        ID={ID}\n        setEditingId={setEditingId}\n        isEditing={isEditing}\n        className=\"todo_title\"\n      />\n      <td>{`${date}__${time}`}</td>\n      <td className={`todo_status ${Completed ? 'completed' : ''}`} onClick={() => toggleCompleted([ID])}>\n        {Completed.toString()}\n      </td>\n    </tr>\n  );\n};\n\nexport default Todo;\n","import React from 'react';\nimport cn from 'classnames';\n\nconst THeadCellWithSoring = ({\n  label,\n  className,\n  sortBy,\n  sortOrder,\n  sortName,\n  handleSort,\n  defaultSortOrder,\n  children,\n  ...rest\n}) => {\n  const isSorting = sortName === sortBy;\n  const classes = cn('table-cell sorting', {\n    [className]: className,\n  });\n\n  const iconClasses = cn('sort_icon', {\n    sortByCurrent: isSorting,\n    asc: sortOrder === 'asc',\n    desc: sortOrder === 'desc',\n  });\n\n  const onSort = () => {\n    let by;\n    if (isSorting) {\n      if (sortOrder === 'asc') {\n        by = 'desc';\n      } else {\n        by = 'asc';\n      }\n    } else if (defaultSortOrder) {\n      by = defaultSortOrder;\n    } else {\n      by = 'asc';\n    }\n    handleSort(sortName, by);\n  };\n  return (\n    <th {...rest} className={classes} onClick={() => onSort()}>\n      {label}\n      <span className={iconClasses}>{sortOrder === 'desc' ? '\\\\/' : '/\\\\'}</span>\n      {children}\n    </th>\n  );\n};\n\nexport default THeadCellWithSoring;\n","import React, { cloneElement } from 'react';\n\nconst renderChildrenWithProps = (components, props) => (\n  <>\n    {components.map((component, key) =>\n      cloneElement(component, {\n        ...props,\n        key,\n      })\n    )}\n  </>\n);\n\nexport default renderChildrenWithProps;\n","export const sortShouldReturn = order => (order === 'asc' ? 1 : -1);\n\nexport const standartSortCompare = order => (a, b) => {\n  if (a <= b) {\n    return -1 * sortShouldReturn(order);\n  }\n  return sortShouldReturn(order);\n};\n\nexport const sortIds = (ids, objectWithItems, sortBy, sortOrder, sortingRules) => {\n  let sorted = [...ids];\n  if (sortBy) {\n    sorted = sorted.sort((aKey, bKey) => {\n      const valueFormatter = sortingRules[sortBy];\n      const aItem = valueFormatter(objectWithItems[aKey][sortBy]);\n      const bItem = valueFormatter(objectWithItems[bKey][sortBy]);\n      return standartSortCompare(sortOrder)(aItem, bItem);\n    });\n  }\n  return sorted;\n};\n","import moment from 'moment';\n\nexport const convertArrayToString = arr => arr.map(val => `${val}`);\n\nexport const getNumberFromString = val => Number(val);\n\nexport const getBinaryFromString = val =>\n  Number(\n    Array.from(val.replace(' ', ''))\n      .map(each => each.charCodeAt(0).toString(2))\n      .join('')\n  );\n\nexport const getNumberFromDate = val => moment(val).valueOf();\n\nexport const getNumberFromStringBool = val => Number(JSON.parse(val));\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { getTodos, changeTodoTitle, toggleTodoCompleted } from '../redux/actions/AppActions';\nimport Todo from '../components/Todo';\nimport THeadCellWithSoring from '../components/common/THeadCellWithSoring';\nimport renderChildrenWithProps from '../hoc/renderChildrenWithProps';\nimport { sortIds } from '../helpers/sorting';\nimport useSorting from '../hooks/useSorting';\nimport {\n  getNumberFromString,\n  getBinaryFromString,\n  getNumberFromDate,\n  getNumberFromStringBool,\n  convertArrayToString,\n} from '../helpers/common';\n\nconst sortingRules = {\n  ID: getNumberFromString,\n  Title: getBinaryFromString,\n  DueDate: getNumberFromDate,\n  Completed: getNumberFromStringBool,\n};\n\nconst defaultSortOrder = 'desc';\n\nconst Todos = ({ todos, loading, getTodos, changeTodoTitle, toggleTodoCompleted }) => {\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [selectedAll, setSelectedAll] = useState(false);\n  const [sortBy, sortOrder, handleSort] = useSorting(null, defaultSortOrder);\n  const [editingId, setEditingId] = useState(null);\n\n  const todosIds = Object.keys(todos);\n  const todosLength = todosIds.length;\n  const sortingProps = {\n    sortBy,\n    sortOrder,\n    handleSort,\n    defaultSortOrder,\n  };\n\n  const isSelected = id => selectedItems.includes(id);\n\n  const handleSelectItem = ID => {\n    if (isSelected(ID)) {\n      setSelectedItems(selectedItems.filter(item => item !== ID));\n      setSelectedAll(false);\n    } else {\n      const newSelectedItems = [...selectedItems, ID];\n      setSelectedItems([...selectedItems, ID]);\n      if (newSelectedItems.length === todosLength) {\n        setSelectedAll(true);\n      }\n    }\n  };\n\n  const handleSelectAll = ({ target: { checked } }) => {\n    setSelectedAll(checked);\n    if (checked) {\n      setSelectedItems(todosIds.map(key => todos[key].ID));\n    } else {\n      setSelectedItems([]);\n    }\n  };\n\n  const handleSetEditing = (id = null) => setEditingId(id);\n\n  const handleToggleTodoCompleted = (ids = []) => toggleTodoCompleted(convertArrayToString(ids));\n\n  const handleToggleSelectedTodoCompleted = e => {\n    e.stopPropagation();\n    toggleTodoCompleted(convertArrayToString(selectedItems));\n  };\n\n  const sortedTodos = sortIds(todosIds, todos, sortBy, sortOrder, sortingRules);\n\n  useEffect(() => {\n    getTodos();\n  }, [getTodos]);\n\n  return (\n    <table className=\"todos container\">\n      <thead>\n        <tr>\n          <th>\n            <input type=\"checkbox\" onChange={handleSelectAll} checked={selectedAll} />\n          </th>\n          {renderChildrenWithProps(\n            [\n              <THeadCellWithSoring label=\"№\" sortName=\"ID\" />,\n              <THeadCellWithSoring label=\"Название\" sortName=\"Title\" />,\n              <THeadCellWithSoring label=\"Время\" sortName=\"DueDate\" />,\n              <THeadCellWithSoring label=\"Статус\" sortName=\"Completed\" className=\"todo_header_status\">\n                {selectedItems.length ? (\n                  <button type=\"button\" onClick={handleToggleSelectedTodoCompleted} disabled={!selectedItems.length}>\n                    Изменить\n                  </button>\n                ) : null}\n              </THeadCellWithSoring>,\n            ],\n            sortingProps\n          )}\n        </tr>\n      </thead>\n      <tbody>\n        {!loading && sortedTodos.length\n          ? sortedTodos.map(key => {\n              const item = todos[key];\n              return (\n                <Todo\n                  key={item.ID}\n                  item={item}\n                  onSelect={handleSelectItem}\n                  checked={isSelected(item.ID)}\n                  handleChange={changeTodoTitle}\n                  setEditingId={handleSetEditing}\n                  isEditing={editingId === item.ID}\n                  toggleCompleted={handleToggleTodoCompleted}\n                />\n              );\n            })\n          : null}\n      </tbody>\n    </table>\n  );\n};\n\nconst mapStateToProps = ({ app }) => {\n  const { todos, loading } = app;\n  return {\n    todos,\n    loading,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getTodos: () => dispatch(getTodos()),\n    changeTodoTitle: params => dispatch(changeTodoTitle(params)),\n    toggleTodoCompleted: params => dispatch(toggleTodoCompleted(params)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todos);\n","import { useState } from 'react';\n\nexport default (defaultSortBy = null, defaultSortOrder = null) => {\n  const [sortBy, setSortBy] = useState(defaultSortBy);\n  const [sortOrder, setSortOrder] = useState(defaultSortOrder);\n\n  const handleSort = (sortName, by) => {\n    setSortBy(sortName);\n    setSortOrder(by);\n  };\n\n  return [sortBy, sortOrder, handleSort];\n};\n"],"sourceRoot":""}
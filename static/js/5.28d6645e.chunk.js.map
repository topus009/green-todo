{"version":3,"sources":["js/components/common/TextInput.js","js/redux/actions/AppActions.js","js/components/common/EditableCell.js","js/components/Todo.js","js/helpers/sorting.js","js/components/common/THeadCellWithSoring.js","js/helpers/common.js","js/pages/Todos.js","js/hooks/useSorting.js"],"names":["TextInput","value","onBlur","onChange","autoFocus","placeholder","type","className","e","target","defaultProps","GETTODOS","constants","PENDING","CHANGETODOTITLE","TOGGLETODOCOMPLETED","GETTODOSERROR","EditableCell","setEditingId","isEditing","ID","onToggleInputFocus","cn","onClick","onFocus","memo","props","item","onSelect","checked","handleChange","toggleCompleted","Title","DueDate","Completed","momentDate","moment","date","format","time","toString","sortShouldReturn","order","sortIds","ids","objectWithItems","sortBy","sortOrder","sortingRules","sorted","sort","aKey","bKey","valueFormatter","aItem","bItem","a","b","THeadCellWithSoring","label","sortName","handleSort","defaultSortOrder","children","rest","isSorting","asc","desc","classes","iconClasses","sortByCurrent","by","useMemo","getSortBy","onSort","useCallback","convertArrayToString","arr","map","val","Number","Array","from","replace","each","charCodeAt","join","valueOf","JSON","parse","Todos","todos","loading","getTodos","changeTodoTitle","toggleTodoCompleted","useState","selectedItems","setSelectedItems","selectedAll","setSelectedAll","defaultSortBy","setSortBy","setSortOrder","useSorting","editingId","memoisedGetTodos","useEffect","todosIds","Object","keys","todosLength","length","sortingProps","isSelected","id","includes","handleSelectItem","filter","newSelectedItems","handleSetEditing","handleToggleTodoCompleted","sortedTodos","key","stopPropagation","disabled","connect","app","dispatch","Api","then","data","payload","err","console","error","params"],"mappings":"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","file":"static/js/5.28d6645e.chunk.js","sourcesContent":["import React from 'react';\nimport { string, bool, func } from 'prop-types';\n\nconst propTypes = {\n  value: string.isRequired,\n  onBlur: func,\n  onChange: func.isRequired,\n  autoFocus: bool,\n  placeholder: string,\n  type: string,\n};\n\nconst defaultProps = {\n  autoFocus: false,\n  placeholder: '',\n  type: 'text',\n  onBlur: () => false,\n};\n\nconst TextInput = ({ value, onBlur, onChange, autoFocus, placeholder, type }) => {\n  const handleChange = e => onChange(e.target.value);\n  return (\n    <input\n      type={type}\n      className=\"text_input\"\n      value={value}\n      onChange={handleChange}\n      onBlur={onBlur}\n      autoFocus={autoFocus}\n      placeholder={placeholder}\n    />\n  );\n};\n\nTextInput.propTypes = propTypes;\nTextInput.defaultProps = defaultProps;\n\nexport default TextInput;\n","import Api from '../../api';\nimport constants from '../constants/App';\n\nconst { GETTODOS, PENDING, CHANGETODOTITLE, TOGGLETODOCOMPLETED, GETTODOSERROR } = constants;\n\nexport function getTodos() {\n  return dispatch => {\n    dispatch({ type: PENDING });\n    return Api.todos\n      .getTodos()\n      .then(data => {\n        dispatch({\n          type: GETTODOS,\n          payload: data,\n        });\n      })\n      .catch(err => {\n        console.error({ err });\n        return dispatch({ type: GETTODOSERROR });\n      });\n  };\n}\n\nexport function changeTodoTitle(payload) {\n  return {\n    type: CHANGETODOTITLE,\n    payload,\n  };\n}\n\nexport function toggleTodoCompleted(payload) {\n  return {\n    type: TOGGLETODOCOMPLETED,\n    payload,\n  };\n}\n","import React from 'react';\nimport { string, bool, number, func } from 'prop-types';\nimport cn from 'classnames';\nimport TextInput from './TextInput';\n\nconst propTypes = {\n  onChange: func.isRequired,\n  value: string.isRequired,\n  setEditingId: func.isRequired,\n  isEditing: bool.isRequired,\n  className: string,\n  ID: number.isRequired,\n};\n\nconst defaultProps = {\n  className: '',\n};\n\nconst EditableCell = ({ onChange, value, setEditingId, isEditing, className, ID }) => {\n  const onToggleInputFocus = () => {\n    setEditingId(null);\n    setEditingId(ID);\n  };\n  return (\n    <>\n      {!isEditing ? (\n        <td onClick={onToggleInputFocus} onFocus={onToggleInputFocus} className={className}>\n          {value}\n        </td>\n      ) : (\n        <td className={cn(className, { isEditing })}>\n          <TextInput value={value} onBlur={() => setEditingId(null)} onChange={onChange} />\n        </td>\n      )}\n    </>\n  );\n};\n\nEditableCell.propTypes = propTypes;\nEditableCell.defaultProps = defaultProps;\n\nexport default EditableCell;\n","import React, { memo } from 'react';\nimport { string, bool, number, func, shape } from 'prop-types';\nimport cn from 'classnames';\nimport moment from 'moment';\nimport EditableCell from './common/EditableCell';\n\nconst propTypes = {\n  item: shape({\n    ID: number,\n    UserName: string,\n    DueDate: string,\n    Completed: bool,\n  }),\n  onSelect: func.isRequired,\n  checked: bool.isRequired,\n  handleChange: func.isRequired,\n  setEditingId: func.isRequired,\n  isEditing: bool.isRequired,\n  toggleCompleted: func.isRequired,\n};\n\nconst Todo = props => {\n  const { item, onSelect, checked, handleChange, setEditingId, isEditing, toggleCompleted } = props;\n  const { Title, ID, DueDate, Completed } = item;\n  const momentDate = moment(DueDate);\n  const date = momentDate.format('YYYY.MM.DD');\n  const time = momentDate.format('HH:mm');\n  const onChange = value => handleChange({ ID, value });\n  return (\n    <tr className={cn('todo', { checked })}>\n      <td className=\"todo_action\">\n        <input type=\"checkbox\" onChange={() => onSelect(ID)} checked={checked} />\n      </td>\n      <td className=\"todo_id\">{ID}</td>\n      <EditableCell\n        onChange={onChange}\n        value={Title}\n        ID={ID}\n        setEditingId={setEditingId}\n        isEditing={isEditing}\n        className=\"todo_title\"\n      />\n      <td>{`${date}__${time}`}</td>\n      <td className={`todo_status ${Completed ? 'completed' : ''}`} onClick={() => toggleCompleted([ID])}>\n        {Completed.toString()}\n      </td>\n    </tr>\n  );\n};\n\nTodo.propTypes = propTypes;\n\nexport default memo(Todo);\n","export const sortShouldReturn = order => (order === 'asc' ? 1 : -1);\n\nexport const standartSortCompare = order => (a, b) => {\n  if (a <= b) {\n    return -1 * sortShouldReturn(order);\n  }\n  return sortShouldReturn(order);\n};\n\nexport const sortIds = (ids, objectWithItems, sortBy, sortOrder, sortingRules) => {\n  let sorted = [...ids];\n  if (sortBy) {\n    sorted = sorted.sort((aKey, bKey) => {\n      const valueFormatter = sortingRules[sortBy];\n      const aItem = valueFormatter(objectWithItems[aKey][sortBy]);\n      const bItem = valueFormatter(objectWithItems[bKey][sortBy]);\n      return standartSortCompare(sortOrder)(aItem, bItem);\n    });\n  }\n  return sorted;\n};\n\nexport const getSortBy = (isSorting, asc, defaultSortOrder) => {\n  let by;\n  if (isSorting) {\n    if (asc) {\n      by = 'desc';\n    } else {\n      by = 'asc';\n    }\n  } else if (defaultSortOrder) {\n    by = defaultSortOrder;\n  } else {\n    by = 'asc';\n  }\n  return by;\n};\n","import React, { useMemo, memo, useCallback } from 'react';\nimport cn from 'classnames';\nimport { string, node, func } from 'prop-types';\nimport { getSortBy } from '../../helpers/sorting';\n\nconst propTypes = {\n  label: string.isRequired,\n  className: string,\n  sortOrder: string,\n  sortBy: string,\n  sortName: string.isRequired,\n  handleSort: func,\n  defaultSortOrder: string,\n  children: node,\n};\n\nconst defaultProps = {\n  className: '',\n  sortOrder: null,\n  sortBy: null,\n  defaultSortOrder: 'desc',\n};\n\nconst THeadCellWithSoring = props => {\n  const { label, className, sortOrder, sortBy, sortName, handleSort, defaultSortOrder, children, ...rest } = props;\n  const isSorting = sortName === sortBy;\n  const asc = sortOrder === 'asc';\n  const desc = sortOrder === 'desc';\n  const classes = cn('table-cell sorting', {\n    [className]: className,\n  });\n\n  const iconClasses = cn('sort_icon', {\n    sortByCurrent: isSorting,\n    [sortOrder]: sortOrder,\n  });\n\n  const by = useMemo(() => getSortBy(isSorting, asc, defaultSortOrder), [isSorting, asc, defaultSortOrder]);\n\n  const onSort = useCallback(() => {\n    handleSort(sortName, by);\n  }, [handleSort, sortName, by]);\n  return (\n    <th {...rest} className={classes} onClick={onSort}>\n      {label}\n      <span className={iconClasses}>{desc ? '\\\\/' : '/\\\\'}</span>\n      {children}\n    </th>\n  );\n};\n\nTHeadCellWithSoring.propTypes = propTypes;\nTHeadCellWithSoring.defaultProps = defaultProps;\n\nexport default memo(THeadCellWithSoring);\n","import moment from 'moment';\n\nexport const convertArrayToString = arr => arr.map(val => `${val}`);\n\nexport const getNumberFromString = val => Number(val);\n\nexport const getBinaryFromString = val =>\n  Number(\n    Array.from(val.replace(' ', ''))\n      .map(each => each.charCodeAt(0).toString(2))\n      .join('')\n  );\n\nexport const getNumberFromDate = val => moment(val).valueOf();\n\nexport const getNumberFromStringBool = val => Number(JSON.parse(val));\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { shape, string, number, bool, func, objectOf } from 'prop-types';\nimport { getTodos, changeTodoTitle, toggleTodoCompleted } from '../redux/actions/AppActions';\nimport Todo from '../components/Todo';\nimport THeadCellWithSoring from '../components/common/THeadCellWithSoring';\nimport { sortIds } from '../helpers/sorting';\nimport useSorting from '../hooks/useSorting';\nimport {\n  getNumberFromString,\n  getBinaryFromString,\n  getNumberFromDate,\n  getNumberFromStringBool,\n  convertArrayToString,\n} from '../helpers/common';\n\nconst sortingRules = {\n  ID: getNumberFromString,\n  Title: getBinaryFromString,\n  DueDate: getNumberFromDate,\n  Completed: getNumberFromStringBool,\n};\n\nconst defaultSortOrder = 'desc';\n\nconst propTypes = {\n  todos: objectOf(\n    shape({\n      ID: number,\n      UserName: string,\n      DueDate: string,\n      Completed: bool,\n    })\n  ),\n  loading: bool,\n  getTodos: func.isRequired,\n  changeTodoTitle: func.isRequired,\n  toggleTodoCompleted: func.isRequired,\n};\n\nconst defaultProps = {\n  todos: {},\n  loading: false,\n};\n\nconst Todos = ({ todos, loading, getTodos, changeTodoTitle, toggleTodoCompleted }) => {\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [selectedAll, setSelectedAll] = useState(false);\n  const [sortBy, sortOrder, handleSort] = useSorting(null, defaultSortOrder);\n  const [editingId, setEditingId] = useState(null);\n\n  const memoisedGetTodos = useCallback(() => getTodos(), [getTodos]);\n\n  useEffect(() => {\n    memoisedGetTodos();\n  }, [memoisedGetTodos]);\n\n  const todosIds = Object.keys(todos);\n  const todosLength = todosIds.length;\n  const sortingProps = {\n    sortBy,\n    sortOrder,\n    handleSort,\n    defaultSortOrder,\n  };\n\n  const isSelected = useCallback(id => selectedItems.includes(id), [selectedItems]);\n\n  const handleSelectItem = useCallback(\n    ID => {\n      if (isSelected(ID)) {\n        setSelectedItems(selectedItems.filter(item => item !== ID));\n        setSelectedAll(false);\n      } else {\n        const newSelectedItems = [...selectedItems, ID];\n        setSelectedItems([...selectedItems, ID]);\n        if (newSelectedItems.length === todosLength) {\n          setSelectedAll(true);\n        }\n      }\n    },\n    [selectedItems, todosLength, setSelectedAll, isSelected, setSelectedItems]\n  );\n\n  const handleSelectAll = ({ target: { checked } }) => {\n    setSelectedAll(checked);\n    if (checked) {\n      setSelectedItems(todosIds.map(key => todos[key].ID));\n    } else {\n      setSelectedItems([]);\n    }\n  };\n\n  const handleSetEditing = useCallback((id = null) => setEditingId(id), [setEditingId]);\n\n  const handleToggleTodoCompleted = useCallback((ids = []) => toggleTodoCompleted(convertArrayToString(ids)), [\n    toggleTodoCompleted,\n  ]);\n\n  const handleToggleSelectedTodoCompleted = e => {\n    e.stopPropagation();\n    toggleTodoCompleted(convertArrayToString(selectedItems));\n  };\n\n  const sortedTodos = sortIds(todosIds, todos, sortBy, sortOrder, sortingRules);\n\n  return (\n    <>\n      {!loading && sortedTodos.length ? (\n        <table className=\"todos container\">\n          <thead>\n            <tr>\n              <th>\n                <input type=\"checkbox\" onChange={handleSelectAll} checked={selectedAll} />\n              </th>\n              <THeadCellWithSoring label=\"№\" sortName=\"ID\" {...sortingProps} />\n              <THeadCellWithSoring label=\"Название\" sortName=\"Title\" {...sortingProps} />\n              <THeadCellWithSoring label=\"Время\" sortName=\"DueDate\" {...sortingProps} />\n              <THeadCellWithSoring label=\"Статус\" sortName=\"Completed\" className=\"todo_header_status\" {...sortingProps}>\n                {selectedItems.length ? (\n                  <button type=\"button\" onClick={handleToggleSelectedTodoCompleted} disabled={!selectedItems.length}>\n                    Изменить\n                  </button>\n                ) : null}\n              </THeadCellWithSoring>\n            </tr>\n          </thead>\n          <tbody>\n            {sortedTodos.map(key => {\n              const item = todos[key];\n              return (\n                <Todo\n                  key={item.ID}\n                  item={item}\n                  onSelect={handleSelectItem}\n                  checked={isSelected(item.ID)}\n                  handleChange={changeTodoTitle}\n                  setEditingId={handleSetEditing}\n                  isEditing={editingId === item.ID}\n                  toggleCompleted={handleToggleTodoCompleted}\n                />\n              );\n            })}\n          </tbody>\n        </table>\n      ) : null}\n    </>\n  );\n};\n\nconst mapStateToProps = ({ app }) => {\n  const { todos, loading } = app;\n  return {\n    todos,\n    loading,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getTodos: () => dispatch(getTodos()),\n    changeTodoTitle: params => dispatch(changeTodoTitle(params)),\n    toggleTodoCompleted: params => dispatch(toggleTodoCompleted(params)),\n  };\n};\n\nTodos.propTypes = propTypes;\nTodos.defaultProps = defaultProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todos);\n","import { useState, useCallback } from 'react';\n\nexport default (defaultSortBy = null, defaultSortOrder = null) => {\n  const [sortBy, setSortBy] = useState(defaultSortBy);\n  const [sortOrder, setSortOrder] = useState(defaultSortOrder);\n\n  const handleSort = useCallback(\n    (sortName, by) => {\n      setSortBy(sortName);\n      setSortOrder(by);\n    },\n    [setSortBy, setSortOrder]\n  );\n\n  return [sortBy, sortOrder, handleSort];\n};\n"],"sourceRoot":""}